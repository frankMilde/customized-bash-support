§ =============================================================
§  Comments
§ =============================================================

== Comments.end-of-line comment == nomenu, append ==
# <CURSOR>
== Comments.frame == map:cfr, sc:r ==
#---------------------------------------------------------------------------
# <CURSOR>
#---------------------------------------------------------------------------
== Comments.function == map:cfu, sc:f ==
#---  FUNCTION  ------------------------------------------------------------
#          NAME:  |?FUNCTION_NAME|
#   DESCRIPTION:  <CURSOR>
#       GLOBALS:  <++>
#     ARGUMENTS:  <++> 
#       RETURNS:  <++> 
#---------------------------------------------------------------------------
== Comments.file header == start, map:ch ==
#===========================================================================
#
#          FILE:  |FILENAME|
# 
#   DESCRIPTION:  <CURSOR>
# 
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#
#       VERSION:  1.0
#       CREATED:  |DATETIME|
#      REVISION:  ---
# 
#         USAGE:  ./|FILENAME| 
# 
#        OUTPUT:  <+OUTPUT+>
#
#        AUTHOR:  |AUTHOR| (|AUTHORREF|), |EMAIL|
#       COMPANY:  |COMPANY|
#
#===========================================================================

#!/bin/bash

# Enforce Bash strict mode, see
# 'http://redsymbol.net/articles/unofficial-bash-strict-mode/'
set -e          # exit if any command [1] has a non-zero exit status
set -u          # a reference to any variable you havent previously defined
                # - with the exceptions of $* and $@ - is an error
set -o pipefail # prevents errors in a pipeline from being masked.
set -o nounset  # Treat unset variables as an error
IFS=$'\n\t'     # meaning full Internal Field Separator - controls what Bash     calls word
                # splitting

<++>

#---------------------------------------------------------------------------
# USER INTERFACE
#---------------------------------------------------------------------------


#---------------------------------------------------------------------------
# GLOBALS
#---------------------------------------------------------------------------
<++>

#---------------------------------------------------------------------------
# FUNCTIONS
#---------------------------------------------------------------------------
<++>




#===  FUNCTION  ============================================================
#          NAME:  main
#   DESCRIPTION:  Runs all functions.
#       GLOBALS:  <CURSOR>
#     ARGUMENTS:  <++> 
#       RETURNS:  <++> 
#===========================================================================
function main() {
	<++>
}

main "$@"
== ENDTEMPLATE ==

§ -------------------------------------------------------------

== Comments.date == insert, map:cd, sc:d ==
|DATE|<CURSOR>
== Comments.date+time == insert, map:ct, sc:t ==
|DATE| |TIME|<CURSOR>
== ENDTEMPLATE ==

§ -------------------------------------------------------------
§  Keywords, Special and Macros
§ -------------------------------------------------------------

== LIST: comments_sections == hash ==
	'GLOBAL DECLARATIONS'     : 'GLOBAL DECLARATIONS',
	'COMMAND LINE PROCESSING' : 'COMMAND LINE PROCESSING',
	'SANITY CHECKS'           : 'SANITY CHECKS',
	'FUNCTION DEFINITIONS'    : 'FUNCTION DEFINITIONS',
	'TRAPS'                   : 'TRAPS',
	'MAIN SCRIPT'             : 'MAIN SCRIPT',
	'STATISTICS AND CLEAN-UP' : 'STATISTICS AND CLEAN-UP',
== LIST: comments_keywords == hash ==
	'bug'         : ':BUG:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'debugging'   : ':DEBUGGING:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'fixme'       : ':FIXME:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'remark'      : ':REMARK:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'todo'        : ':TODO:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'tricky'      : ':TRICKY:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'warning'     : ':WARNING:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'workaround'  : ':WORKAROUND:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'new keyword' : ':<CURSOR>:|DATE| |TIME|:|AUTHORREF|: {+COMMENT+}',
== LIST: comments_macros == hash ==
	'AUTHOR'       : '|AUTHOR|',
	'AUTHORREF'    : '|AUTHORREF|',
	'COMPANY'      : '|COMPANY|',
	'COPYRIGHT'    : '|COPYRIGHT|',
	'EMAIL'        : '|EMAIL|',
	'ORGANIZATION' : '|ORGANIZATION|',
== ENDLIST ==

§ -------------------------------------------------------------

== Comments.script sections == expandmenu, map:css, sc:s ==
|PickList( 'script sections', 'comments_sections' )|
#===========================================================================
#  |PICK|
#===========================================================================
== Comments.keyword comments == expandmenu, append, map:ckc, sc:k ==
|PickList( 'keyword comment', 'comments_keywords' )|
 # |PICK|
== Comments.macros == expandmenu, insert, map:cma, sc:m ==
|PickList( 'macro', 'comments_macros' )|
|PICK|
== ENDTEMPLATE ==

== SEP: Comments.sep1 ==
